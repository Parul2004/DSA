a) Duplicate Elements In Array

1. create a Set
2. Sort it 
3. then put its elements in vector and return it

set<int>s1;
sort(arr,arr+n);
int f = 0;
for(int i = 0;i<n;i++){
    if(arr[i] == arr[i+1]){
        s1.insert(arr[i]);
        f = 1;
    }
}

vector<int>v;
if(f==0){
    v.push_back(-1);
}
else{

    for(auto i:s1){
        v.push_back(i);
    }
}


return v;

b) Product Except Itself
// GFG Solution

create left,right and Answer vector

nums = {2,3,4,5};

vector<long long int>left(n);
vector<long long int>left(n);

left[0] = 1, right[n-1] = 1;

for(int i = 1;i<n;i++){
        left[i] = left[i-1]*nums[i-1];
}

for(int j = n-2;j>=0;j--){
    right[i] = right[i+1]*nums[i+1];
}

for(int i = 0;i<n;i++){
    Answer[i] = left[i]*right[i];
}

for(int i = 0;i<n;i++){
    cout<<Answer[i]<<" ";
}

// Leetcode Solution By "Me"

vector<int>left(n);
vector<int>right(n);

int l = 1,r = 1;
for(int i = 0;i<n;i++){
    l*=nums[i];
    left[i] = l;
}

for(int i = n-1;i>=0;i--){
    r*=nums[i];
    right[i] = r;
}

for(int i = 0;i<n;i++){
    if(i==0){
        Answer[i] = right[i+1];
    }
    else if(i==n-1){
        Answer[i] = left[i-1];
    }
    else{
        Answer[i] = left[i-1]*right[i+1];
    }

}

for(int i = 0;i<n;i++){
    cout<<Answer[i]<<" ";
}

c) Merge Sort

void Merge(vector<int>&arr,int low,int mid,int high){
    vector<int>temp;

    int left = low;
    int right = mid+1;

    while(left<=mid && right<=high){
        if(arr[left]<=arr[right]){
            temp.push_back(arr[left]);
            left++
        }
        else{
            temp.push_back(arr[right]);
            right++;
        }
    }

    while(left<=mid){
        temp.push_back(arr[left]);
        left++;
    }

    while(right<=high){
        temp.push_back(arr[right]);
        right++;
    }

    for(int i = low;i<=high;i++){
        arr[i] = temp[i-low];
    }
}
void MergeSort(vector<int>&arr,int low,int high){
    if(low>=high) return;
    int mid = (low+high)/2;

    MergeSort(arr,low,mid);
    MergeSort(arr,mid+1,high);
    Merge(arr,low,mid,high);
}
int main(){

    // time Complexity- O(NlogN)
    // Space Complexity - O(N) for temporary Array
    vector<int>arr = {9,4,7,6,3,1,5};
    int n = 7;
    cout<<"Before Sorting Array : " <<endl;

    for(int i = 0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;

    MergeSort(arr,0,n-1);

    cout<<"After Sorting Array : "<<endl;
    for(int i = 0;i<n;i++){
        cout<<arr[i]<<" ";
    }

    cout<<endl;
}


d)  Count Reverse Pairs

1. i<j && arr[i] > 2*arr[j]

// Brute Force Approach - Time Complexity - O(N^2)

int ReversePairs(vector<int>&arr){
    int Pairs = 0;

    for(int i = 0;i<arr.size();i++){
        for(int j = i+1;j<arr.size();j++){
            if(arr[i]>2*arr[j]){
                Pairs++;
            }
        }
    }
    return Pairs;
}


// Optimal Approach - Merge Sort

int Merge(vector<int>&nums,int low,int high,int mid){
    int total = 0;

    int j = mid+1;

    for(int i = low;i<=mid;i++){
        while(j<=high && arr[i]>2LL*arr[j]){
            j++;
        }
        total += (j-(mid+1));
    }

    // now merge array and sort it
    // same as Merge Sort
}

int MergeSort(vector<int>&nums,int low,int high){
    if(low>=high) return 0;
    int mid = (low+high)/2;

    int inv = MergeSort(nums,low,mid);
    inv+=MergeSort(nums,mid+1,high);
    inv+=Merge(nums,low,mid,high);

    return inv;
}

int main(){
    vector<int>arr = {1,3,2,3,1};
    cout<<"Before Sorted Array : "<<endl;
    for(int i = 0;i<n;i++){
        cout<<arr[i]<<" ";
    }

    cout<<endl;

    MergeSort(arr,0,n-1);

    cout<<"After Sorted Array : "<<endl;
    for(int i = 0;i<n;i++){
        cout<<arr[i]<<" ";
    }

    cout<<endl;
}